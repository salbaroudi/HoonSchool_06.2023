::This file contains hoon expressions I use to test sub-components. 
::This file is not runnable, and the snippets are just pasted into the dojo.


:: First, lets define a simple list as an array

=/  mylist  [1 3 5 7 9 2 4 6 8 10 ~]  mylist

:: Operate on an array with turn. Lets kick a trap.

=/  mylist  [1 3 5 7 9 2 4 6 8 10 ~]
|- (turn mylist dec)


:: Implement list traversal using recursion.

=/  numlist  `(list @ud)`~[1 3 5 7 9 2 4 6 8 10]
=/  llen  (lent numlist)
=/  i  0
|-  
  ?~  numlist
    i 
  %=  $
  i  (add i 1)
  numlist  t.numlist
==


:: Implement list addition using tail-recursion (!).
=/  numlist  `(list @ud)`~[1 3 5 7 9 2 4 6 8 10]
=/  llen  (lent numlist)
=/  total  0
|-  
  ?~  numlist
    0 
  (add i.numlist $(numlist t.numlist))


:: Lets implement a block of code that checks an input list.
:: Is the list empty? Are there non-negative numbers? Are there non @ud data types present in our list?
:: ...we really need a mold to do our typechecking, else return an error.
=/  numlist  `(list @ud)`~[1 3 5 7 9 2 4 6 8 10]
?~  numlist  
"Error: List is empty. Check Input"  
^-  (list @ud)  numlist


:: Traverse a list, and create a second list that reverses the list 
=/  numlist  `(list @ud)`~[1 3 5 7 9 2 4 6 8 10]



:: Before we can even code counting sort, there is one major problem that we face with a functional/subject oriented langauge.
:: How to randomly access elements in an array? How do I pull element 1....j...n from a list with n elements?
:: Presumably we just have to do a kind of linked-list traversal, and suffer for this. Array data structures need to be jetted
:: for hoon anyways. So lets code it...
:: Use the trap . centis coding pattern to do this.

=>
=/  numlist  `(lest @ud)`~[1 3 5 7 9 2 4 6 8 10]
=/  llen  (lent numlist)
=/  i  0
|%
++  one  1
++  two  2
--
%=  

=>
=/  numlist  `(lest @ud)`~[1 3 5 7 9 2 4 6 8 10]
=/  llen  (lent numlist)
=/  i  0
  |%
  ++  $  
    ?~  numlist  !!
    ?:  =(i 5)
      i
    %=  $
    i  (add i 1)
    numlist  t.numlist
    ==
--
$


  ++  $  
    ?:  =(i 5)
      n
    %=  $
    i  (add i 1)
    numlist  (numlist )
    ==

